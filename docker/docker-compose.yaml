version: "3.8"

services:
  idempotencia-api-rest:  
    build: 
      context: ../
      dockerfile: ./docker/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - mongo1
    networks:
      api_network:
        aliases:
          - api-rest
        
  redis:
    image: "redis:latest"
    container_name: "redis-idempotencia-project"
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      api_network:
        aliases:
          - redis
    
  mongo1:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo1.member.host:27017',priority:1},{_id:1,host:'mongo2.member.host:27018',priority:0.5},{_id:2,host:'mongo3.member.host:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      #start_interval: 1s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
    networks:
      api_network:
        aliases:
          - mongo1.member.host

  mongo2:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    volumes:
      - "mongo2_data:/data/db"
    networks:
      api_network:
        aliases:
          - mongo2.member.host

  mongo3:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    volumes:
      - "mongo3_data:/data/db"
    networks:
      api_network:
        aliases:
          - mongo3.member.host

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  redis_data:

networks:
  api_network:
